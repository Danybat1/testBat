package com.freightops.config;

import com.freightops.entity.City;
import com.freightops.entity.CashBox;
import com.freightops.repository.CityRepository;
import com.freightops.repository.CashBoxRepository;
import com.freightops.service.CurrencyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.List;

/**
 * Data Initializer for DRC Cities, Default Cash Box, and Currency System
 * Populates the database with DRC cities, creates a default cash box, and
 * initializes currencies on application startup
 */
@Component
public class DataInitializer implements CommandLineRunner {

    private static final Logger logger = LoggerFactory.getLogger(DataInitializer.class);

    private final CityRepository cityRepository;
    private final CashBoxRepository cashBoxRepository;
    private final CurrencyService currencyService;

    @Autowired
    public DataInitializer(CityRepository cityRepository, CashBoxRepository cashBoxRepository,
            CurrencyService currencyService) {
        this.cityRepository = cityRepository;
        this.cashBoxRepository = cashBoxRepository;
        this.currencyService = currencyService;
    }

    @Override
    public void run(String... args) throws Exception {
        logger.info("üöÄ Initialisation des donn√©es de base...");
        initializeDRCCities();
        initializeDefaultCashBox();
        initializeCurrencySystem();
        logger.info("‚úÖ Initialisation des donn√©es termin√©e");
    }

    private void initializeDRCCities() {
        // Check if cities already exist to avoid duplicates
        if (cityRepository.count() > 0) {
            return;
        }

        // DRC Cities with IATA codes - Extended list
        City[] drcCities = {
                // Principales villes
                new City("Kinshasa", "FIH", "R√©publique D√©mocratique du Congo"),
                new City("Lubumbashi", "FBM", "R√©publique D√©mocratique du Congo"),
                new City("Kisangani", "FKI", "R√©publique D√©mocratique du Congo"),
                new City("Mbuji-Mayi", "MJM", "R√©publique D√©mocratique du Congo"),
                new City("Goma", "GOM", "R√©publique D√©mocratique du Congo"),
                new City("Kananga", "KGA", "R√©publique D√©mocratique du Congo"),
                new City("Bukavu", "BKY", "R√©publique D√©mocratique du Congo"),
                new City("Kolwezi", "KWZ", "R√©publique D√©mocratique du Congo"),
                new City("Mbandaka", "MDK", "R√©publique D√©mocratique du Congo"),
                new City("Matadi", "MAT", "R√©publique D√©mocratique du Congo"),

                // Villes importantes
                new City("Kindu", "KND", "R√©publique D√©mocratique du Congo"),
                new City("Gemena", "GMA", "R√©publique D√©mocratique du Congo"),
                new City("Isiro", "IRP", "R√©publique D√©mocratique du Congo"),
                new City("Bunia", "BUX", "R√©publique D√©mocratique du Congo"),
                new City("Bandundu", "BAN", "R√©publique D√©mocratique du Congo"),
                new City("Tshikapa", "TSH", "R√©publique D√©mocratique du Congo"),
                new City("Uvira", "UVR", "R√©publique D√©mocratique du Congo"),
                new City("Boma", "BOA", "R√©publique D√©mocratique du Congo"),
                new City("Kamina", "KMN", "R√©publique D√©mocratique du Congo"),
                new City("Lodja", "LJA", "R√©publique D√©mocratique du Congo"),
                new City("Ilebo", "PFR", "R√©publique D√©mocratique du Congo"),
                new City("Gbadolite", "BDT", "R√©publique D√©mocratique du Congo"),
                new City("Kalemie", "FMI", "R√©publique D√©mocratique du Congo"),
                new City("Lisala", "LIQ", "R√©publique D√©mocratique du Congo"),
                new City("Inongo", "INO", "R√©publique D√©mocratique du Congo"),

                // Villes suppl√©mentaires
                new City("Kikwit", "KKW", "R√©publique D√©mocratique du Congo"),
                new City("Likasi", "LIK", "R√©publique D√©mocratique du Congo"),
                new City("Mwene-Ditu", "MWX", "R√©publique D√©mocratique du Congo"),
                new City("Kabinda", "KAB", "R√©publique D√©mocratique du Congo"),
                new City("Tshela", "TSE", "R√©publique D√©mocratique du Congo"),
                new City("Kenge", "KEN", "R√©publique D√©mocratique du Congo"),
                new City("Kasongo", "KAS", "R√©publique D√©mocratique du Congo"),
                new City("Pweto", "PWO", "R√©publique D√©mocratique du Congo"),
                new City("Manono", "MNO", "R√©publique D√©mocratique du Congo"),
                new City("Shabunda", "SHB", "R√©publique D√©mocratique du Congo"),
                new City("Baraka", "BAR", "R√©publique D√©mocratique du Congo"),
                new City("Fizi", "FIZ", "R√©publique D√©mocratique du Congo"),
                new City("Rutshuru", "RUT", "R√©publique D√©mocratique du Congo"),
                new City("Beni", "BEN", "R√©publique D√©mocratique du Congo"),
                new City("Buta", "BUT", "R√©publique D√©mocratique du Congo"),
                new City("Bumba", "BUM", "R√©publique D√©mocratique du Congo")
        };

        // Save all cities
        for (City city : drcCities) {
            try {
                cityRepository.save(city);
            } catch (Exception e) {
                logger.error("Error initializing city " + city.getName() + ": " + e.getMessage(), e);
            }
        }
    }

    private void initializeDefaultCashBox() {
        try {
            // V√©rifier s'il existe d√©j√† une caisse active
            List<CashBox> existingCashBoxes = cashBoxRepository.findByActiveTrue();

            if (existingCashBoxes.isEmpty()) {
                logger.info("Aucune caisse active trouv√©e. Cr√©ation de la caisse par d√©faut...");

                // Cr√©er une caisse par d√©faut
                CashBox defaultCashBox = new CashBox();
                defaultCashBox.setName("Caisse Principale");
                defaultCashBox.setDescription("Caisse principale pour les op√©rations de tr√©sorerie");
                defaultCashBox.setInitialBalance(new BigDecimal("1000.00"));
                defaultCashBox.setCurrentBalance(new BigDecimal("1000.00"));
                defaultCashBox.setActive(true);

                CashBox savedCashBox = cashBoxRepository.save(defaultCashBox);
                logger.info("‚úÖ Caisse cr√©√©e automatiquement: {} (ID: {})", savedCashBox.getName(),
                        savedCashBox.getId());
            } else {
                logger.info("‚úÖ Caisse active existante: {} (ID: {})", existingCashBoxes.get(0).getName(),
                        existingCashBoxes.get(0).getId());
            }
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'initialisation de la caisse par d√©faut: {}", e.getMessage(), e);
        }
    }

    /**
     * Initialiser le syst√®me de devises avec USD et CDF
     */
    private void initializeCurrencySystem() {
        try {
            logger.info("üîÑ Initialisation du syst√®me de devises...");
            currencyService.initializeDefaultData();
            logger.info("‚úÖ Syst√®me de devises initialis√© avec succ√®s");
        } catch (Exception e) {
            logger.error("‚ùå Erreur lors de l'initialisation du syst√®me de devises: {}", e.getMessage(), e);
        }
    }
}
